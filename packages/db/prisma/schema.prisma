generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId         String   @id @default(cuid())
  username       String
  email          String   @unique
  password       String
  mobile         String   @unique
  image          String   @default("https://github.com/shadcn.png")
  token          String   @default("")
  createdOn      DateTime @default(now())
  orders         Order[]
}

model Admin {
  adminId           String  @id @default(cuid())
  adminName         String
  email             String  @unique
  password          String
  mobile            String  @unique
  image             String  @default("https://github.com/shadcn.png")
  token             String  @default("")
  orders            Order[] @relation("Orders")
  transferredOrders Order[] @relation("Transferred")
}

model Service {
  serviceId   String      @id @default(cuid())
  serviceName ServiceType
  content     String
  image       String
  options     Option[]
  orders      Order[]
}

model Authenticator{
  authId String @id @default(cuid())
  email String @unique
  otp String
  createdAt DateTime @default(now())
  expiresAt DateTime
}


model Option {
  optionId   String     @id @default(cuid())
  optionName OptionType
  image      String
  serviceId  String
  duration   Int
  price      Float
  priority   Int
  remaining  Int
  service    Service    @relation(fields: [serviceId], references: [serviceId])
  orders     Order[]
}

model Order {
  orderId       String        @id
  userId        String
  serviceId     String
  optionId      String
  createdOn     DateTime      @default(now())
  deliveredOn   DateTime?
  orderStatus   OrderStatus   @default(pending)
  reason        String?
  amountPaid    Float         @default(0)
  adminId       String
  assignedTo    String?
  measurements  Measurement[]
  admin         Admin         @relation("Orders", fields: [adminId], references: [adminId])
  assignedAdmin Admin?        @relation("Transferred", fields: [assignedTo], references: [adminId])
  option        Option        @relation(fields: [optionId], references: [optionId])
  service       Service       @relation(fields: [serviceId], references: [serviceId])
  user          User          @relation(fields: [userId], references: [userId])
}

model Measurement {
  id      String          @id @default(cuid())
  orderId String
  type    MeasurementType
  value   Float
  order   Order           @relation(fields: [orderId], references: [orderId])
}

enum ServiceType {
  SHIRT
  PANT
  DRESS
  KURTA
  SAFARI
}

enum OptionType {
  NITRO
  EXPRESS
  SWIFT
  RABBIT
}

enum OrderStatus {
  pending
  started
  stitched
  delivered
  cancelled
}

enum MeasurementType {
  SHIRT_LENGTH
  CHEST
  SHOULDER
  HANDS
  FRONT_LOOSE
  PANT_LENGTH
  WAIST
  HIP
  THIGHS_LOOSE
  BOTTOM
}
