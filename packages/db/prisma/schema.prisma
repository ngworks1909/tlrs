// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  userId String @id @default(cuid())
  username String 
  email String @unique
  password String
  mobile String @unique
  image String @default("https://github.com/shadcn.png")
  token String @default("")
  orders Order[]
}

model Admin{
  adminId String @id @default(cuid())
  adminName String
  email String @unique
  password String
  mobile String @unique
  image String @default("https://github.com/shadcn.png")
  token String @default("")
  transferredOrders Order[] @relation("Transferred")
  orders Order[] @relation("Orders")
}

model Service{
  serviceId String @id @default(cuid())
  serviceName ServiceType
  content String
  image String
  options Option[]
  orders Order[]
}

model Option{
  optionId String @id @default(cuid())
  optionName OptionType
  image String
  serviceId String
  service Service @relation(fields: [serviceId], references: [serviceId])
  duration Int
  price Float
  priority Int
  remaining Int
  orders Order[]
}

enum ServiceType {
  SHIRT
  PANT
  DRESS
  KURTA
  SAFARI
}

enum OptionType {
  NITRO
  EXPRESS
  SWIFT
  RABBIT
}

model Order {
  orderId String @id
  userId String
  user User @relation(fields: [userId], references: [userId])
  serviceId String
  service Service @relation(fields: [serviceId], references: [serviceId])
  optionId String
  option Option @relation(fields: [optionId], references: [optionId])
  adminId String
  admin Admin @relation("Orders", fields: [adminId], references: [adminId])
  assignedTo String? 
  assignedAdmin Admin? @relation("Transferred", fields: [assignedTo], references: [adminId])
  createdOn DateTime @default(now())
  deliveredOn DateTime?
  orderStatus OrderStatus @default(pending)
  reason String?
  amountPaid Float @default(0)
  measurements  Measurement[]
}

model Measurement {
  id             String          @id @default(cuid())
  order          Order           @relation(fields: [orderId], references: [orderId])
  orderId        String
  type           MeasurementType
  value          Float
}


enum OrderStatus {
  pending
  started
  stitched
  delivered 
  cancelled
}

enum MeasurementType {
  SHIRT_LENGTH
  CHEST
  SHOULDER
  HANDS
  FRONT_LOOSE
  PANT_LENGTH
  WAIST
  HIP
  THIGHS_LOOSE
  BOTTOM
}


